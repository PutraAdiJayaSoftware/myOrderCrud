<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Order</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>

<div class="container mt-5">
    <h2 class="text-center">Sales Order</h2>

    <!-- Search Section -->
    
    <div class="card mb-3">  
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <input type="text" class="form-control" id="keywords" placeholder="Keywords">
                </div>
                <div class="col-md-4">
                    <input type="date" class="form-control" id="orderDate">
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary" id="searchBtn">Search</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="mb-3">
        <button class="btn btn-primary" id="addNewDataBtn"  onclick="window.location.replace('Home/Create');">Add New Data</button>
        <button class="btn btn-success" id="exportToExcelBtn">Export To Excel</button>
    </div>

    <!-- Sales Order Table -->
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th>No</th>
                <th>Action</th>
                <th>Sales Order</th>
                <th>Order Date</th>
                <th>Customer</th>
            </tr>
        </thead>
        <tbody id="salesOrderTableBody">
            <!-- Data rows will be inserted here -->
        </tbody>
    </table>

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item">
                <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item">
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    
    // Function to load sales orders from the API
    async function loadSalesOrders() {
        try {
            const response = await fetch('/api/SOOrder');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const salesOrders = await response.json();
            const tableBody = document.getElementById('salesOrderTableBody');
            tableBody.innerHTML = ""; // Clear existing rows

            // Create an array of customer ID promises
            const customerPromises = salesOrders.map(order => getCustomerName(order.COM_CUSTOMER_ID));

            // Wait for all promises to resolve
            const customerNames = await Promise.all(customerPromises);

            salesOrders.forEach((order, index) => {
                const orderDate = new Date(order.ORDER_DATE).toLocaleDateString('id-ID'); // Format date
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editOrder(${order.SO_ORDER_ID})">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteOrder(${order.SO_ORDER_ID})">Delete</button>
                    </td>
                    <td>${order.ORDER_NO}</td>
                    <td>${orderDate}</td>
                    <td>${customerNames[index]}</td>
                `;
                tableBody.appendChild(row);
            });
        } catch (error) {
            console.error('There was a problem with the fetch operation:', error);
        }
    }

    // Function to get customer name based on ID
    async function getCustomerName(customerId) {
        try {
            const response = await fetch(`/api/Customer/${customerId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const customer = await response.json();
            return customer.CUSTOMER_NAME;
        } catch (error) {
            console.error(`Error fetching customer ${customerId}:`, error);
            return "Unknown Customer"; // Fallback in case of error
        }
    }

    // Load sales orders on page load
    window.onload = loadSalesOrders;

    // Function stubs for buttons
    function editOrder(orderId) {
        window.document.location = (`Edit/${orderId}`);
    }

    async function deleteOrder(orderId) {
        const confirmation = confirm(`Are you sure you want to delete the Sales Order with ID: ${orderId}?`);
        if (confirmation) {
            try {
                const response = await fetch(`/api/SOOrder/${orderId}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    alert('Order deleted successfully.');
                    loadSalesOrders(); // Refresh the order list
                } else {
                    alert('Failed to delete order.');
                }
            } catch (error) {
                console.error('Error deleting order:', error);
                alert('Error occurred while deleting the order.');
            }
        }
    }

</script>

</body>
</html>
